/* Simple +/-/* expression language; parser evaluates constant expressions on the fly*/
/**
 *  Package and Import Specifications
 */
import java_cup.runtime.*;

/**
 *  Usercode Components
 */
parser code {:
    // Connect this parser to a scanner!
    Scanner s;
    Parser(Scanner s){ this.s=s; }
:}

/* define how to connect to the scanner! */
scan with {: return s.next_token(); :};

/**
 *  Symbol Lists
 */

/* Terminals (tokens returned by the scanner). */
terminal            SEMI, CONCAT, MINUS, TIMES, LPAREN, RPAREN, IF, WHILE, FOR, ELSE , PREFIX,REVERSE,PRINT,RBRACET,LBRACET,COMA;
terminal String     STRING_LITERAL,IDENT;        // our scanner provides numbers as strings

/*  Non terminals */
non terminal expr_list;
non terminal expr;      // used to store evaluated subexpressions
non terminal String     statement,body;
non terminal booleanEx;
non terminal String     ifElse;
non terminal String     prefixList;
non terminal String     Epsilon;
non terminal String     reverse;
non terminal String     concatenation;
non terminal String     funcDecList;
non terminal String funcDec, funcCall,ifElseTail,funcCalls;
non terminal String argsList,argsListTail,expressionList;
non terminal String ifexp,exp,taf,factor;

/**
 *  Precedence Declarations
 */
precedence left IDENT;
precedence left PREFIX;
precedence left  IF,ELSE,TIMES;
precedence left  CONCAT;
precedence left  LBRACET;
precedence right REVERSE;

/**
 *  The Grammar Rules
 */

expr_list ::=expr:e  {:System.out.println();:};


expr::=          funcDecList:f    expressionList               {:
                                                                String str=f;
                                                                String before="",after="";
                                                                char[] ch=str.toCharArray();
                                                                for(int i=ch.length-1;i>=0;i--){
                                                                    if(ch[i]=='}' ){
                                                                                    for(int k=i+1;k<ch.length;k++){
                                                                                        after+=ch[k];
                                                                                    }
                                                                                    for(int k=0;k<=i;k++){
                                                                                        before+=ch[k];
                                                                                    }
                                                                                    break;
                                                                                }
                                                                }

                                                                System.out.print("\npublic class Main {\n");
                                                                System.out.print("public static void main(String[] args) {");
                                                                System.out.printf("  %s",after);
                                                                System.out.print("\n }\n");
                                                                System.out.printf("\n%s",before);
                                                                System.out.print("\n}");

                                                            :};

body::=statement:bodyFunction                     {:RESULT = "\treturn "+bodyFunction+";";:};
expressionList::= Epsilon:e expressionList:list       {:System.out.println(e);
                                                        RESULT=e+"\n"+list;:}
                |                                       {:RESULT="";:};
statement::= //ifElse:ifElse                         {: RESULT=ifElse; :}
            Epsilon:expression                   {:RESULT=expression;:}
            |funcDecList:functionCall                {:RESULT=functionCall;:}
            ;

ifElse ::= IF LPAREN prefixList:prefixList RPAREN
                 statement:stm1
              ELSE
                 statement:stm2
                 {:
                    RESULT= prefixList+" ? "+stm1+" : "+stm2;
                 :};




prefixList::= Epsilon:str1 PREFIX Epsilon:str2          {:RESULT="("+str2+")"+".startsWith("+str1+")";:};

Epsilon::= reverse:et concatenation:et2                        {:String s;
                                                                s=et+et2;
                                                                RESULT =s;
                                                             :}
        |IDENT:VAR                                 {:RESULT='"'+VAR+'"';:}
         |ifElse:ifexp                              {:RESULT=ifexp;:}   ;


ifElseTail::=ifElse:ifexp           {:RESULT=ifexp;:}
           |                        {:RESULT="";:};

concatenation::= CONCAT Epsilon:epsilon                     {: RESULT="+"+"("+epsilon+")";:}
                 |                                          {:RESULT="";:};

reverse::= //IDENT:string                                {:RESULT='"'+string+'"';:}
             // | REVERSE reverse:epsilonTail            {:
          REVERSE exp:epsilonTail                             {:
                                                               RESULT="new StringBuffer("+epsilonTail+").reverse().toString()";
                                                               // System.out.println(RESULT);
                                                                :};

exp::= IDENT :VAR {:RESULT=VAR;:}
    | ifElse:ifelse {:RESULT="("+ifelse+")";:}
    | REVERSE exp:exp  {:RESULT="new StringBuffer("+exp+").reverse().toString()";:};

/*
exp::= taf:e CONCAT taf:t                           {:RESULT=e+"+"+t;:};
    //|taf:taf                                         {:RESULT=taf;:};

taf::= REVERSE taf:taf                             {:RESULT="new StringBuffer("+taf+").reverse().toString()";
                                                   // System.out.println(RESULT);
                                                    :}
     |factor:F                                    {:RESULT=F;:};

     factor::= IDENT:VAR {:RESULT=VAR;:}
             | ifElse:ifelse {:RESULT="("+ifelse+")";:}
             |               {:RESULT="";:};*/











funcDecList::= funcDec:fd funcDecList:fdl                            {:RESULT=fd+fdl;:}
               |funcCall:fc funcDecList:fdl                          {:RESULT=fc+"\n"+fdl;:}
               |                                                     {:RESULT="";:};



funcDec::= IDENT:functionName  argsList:myArgs  LBRACET body:funcBody RBRACET   {:RESULT="public static String "+functionName+myArgs+"{"
                                                                                                +System.getProperty("line.separator")+funcBody+" }"+"\n";
                                                                                                //System.out.printf("\n%s",RESULT);
                                                                                                :};

argsList::= //IDENT:argument argsListTail:nextArguments                         {: RESULT="String "+argument+nextArguments;:}
             LPAREN funcCall:funCall argsListTail:nextArguments                      {:RESULT="("+funCall+nextArguments;:}
             |LPAREN Epsilon:expression argsListTail:nextArguments                    {:RESULT="("+"String "+expression+nextArguments;:}
             |LPAREN RPAREN                                                           {:RESULT="( )";:};

argsListTail::= //COMA IDENT:argument argsListTail:nextArguments                 {: RESULT =", "+"String "+argument+nextArguments;:}
            COMA funcCall:func argsListTail:nextArguments                            {:RESULT=", "+func+nextArguments;:}
            |COMA Epsilon:expression argsListTail:nextArguments                      {:RESULT=", "+"String" +expression+nextArguments;:}
            |RPAREN                                                                  {:RESULT=")";:};

funcCall::=IDENT:functionName  argsList:myArgs                    {:        String[] arrOfStr = myArgs.split("String");
                                                                                        String myNewArgs="";
                                                                                        for (String a : arrOfStr){

                                                                                            myNewArgs+=a;

                                                                                        }
                                                                                        String s=functionName+myNewArgs;
                                                                                        RESULT=s;
                                                                                        //RESULT="System.out.println("+s+");\n";
                                                                                :};