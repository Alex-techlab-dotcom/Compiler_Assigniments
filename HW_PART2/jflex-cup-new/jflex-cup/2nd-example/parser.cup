/* Simple +/-/* expression language; parser evaluates constant expressions on the fly*/
/**
 *  Package and Import Specifications
 */
import java_cup.runtime.*;

/**
 *  Usercode Components
 */
parser code {:
    // Connect this parser to a scanner!
    Scanner s;
    Parser(Scanner s){ this.s=s; }
:}

/* define how to connect to the scanner! */
scan with {: return s.next_token(); :};

/**
 *  Symbol Lists
 */

/* Terminals (tokens returned by the scanner). */
terminal             CONCAT, LPAREN, RPAREN, IF,  ELSE , PREFIX,REVERSE,RBRACET,LBRACET,COMA,TIMES;
terminal String     STRING_LITERAL,IDENT;        // our scanner provides numbers as strings

/*  Non terminals */
non terminal String FDargsList,FDargsListTail;
non terminal expr_list;
non terminal expr;      // used to store evaluated subexpressions
non terminal String     body;
non terminal String     ifElse;
non terminal String     prefixList;
non terminal String     Epsilon;
non terminal String     reverse;
non terminal String     concatenation;
non terminal String funcDec, funcCall;
non terminal String argsList,argsListTail,ifcommands;
non terminal String exp,statementList;
non terminal String printMain;

/**
 *  Precedence Declarations
 */

precedence left PREFIX,STRING_LITERAL;
precedence left  IF,ELSE,TIMES,LPAREN,RPAREN,COMA;
precedence left  CONCAT;
precedence right REVERSE;
//precedence left LBRACET,RBRACET;

/**
 *  The Grammar Rules
 */

//expr_list ::=expr:e  {:System.out.println();:};

expr::=    printMain      statementList:f            {:
                                                                String str=f;
                                                                String before="",after="";
                                                                after=f;
                                                                String[] arrOfStr = after.split("\n");
                                                                String myNewAfter="";
                                                                for (String a : arrOfStr){
                                                                    if(!(a.isEmpty())) myNewAfter+="   System.out.println("+a+");\n";
                                                                }
                                                                System.out.print("public static void main(String[] args) {\n");
                                                                System.out.printf("%s",myNewAfter);
                                                                System.out.print("\n }\n");
                                                                System.out.printf("\n%s",before);
                                                                System.out.print("\n}");

                                                            :};

printMain ::=                                                                     {:RESULT="\npublic class main {";System.out.println(RESULT);:}    ;

body::=Epsilon:bodyFunction                                                       {:RESULT = "\treturn "+bodyFunction+";";:};

statementList::= funcDec:fd statementList:stmList                                 {:RESULT="\n"+stmList;System.out.println(fd);:}
            | Epsilon:expression   statementList:stmList                          {:RESULT=expression+"\n"+stmList;:}
            |                                                                     {:RESULT="";:};

ifElse ::= IF LPAREN prefixList:prefixList RPAREN
                 ifcommands:stm1
              ELSE
                 ifcommands:stm2
                 {:
                    RESULT= prefixList+" ? "+stm1+" : "+stm2;
                 :};

ifcommands::=Epsilon:e {:RESULT=e;:};

prefixList::= Epsilon:str1 PREFIX Epsilon:str2                                      {:RESULT="("+str2+")"+".startsWith("+str1+")";:};

Epsilon::= reverse:et concatenation:et2                                             {:String s;s=et+et2;RESULT =s;:}
        |ifElse:ifexp                                                               {:RESULT=ifexp;:}   ;

concatenation::= CONCAT Epsilon:epsilon                                             {: RESULT="+"+"("+epsilon+")";:}
                 |                                                                  {:RESULT="";:};

reverse::= IDENT:string                                                             {:RESULT=string;:}
          |STRING_LITERAL:s	                                                        {:   RESULT = "\""+s+"\"" ;    :}
          |funcCall:f                                                               {:RESULT=f;:}
          |REVERSE exp:epsilonTail                                                  {: RESULT="new StringBuffer("+epsilonTail+").reverse().toString()";:};

exp::= IDENT :VAR                                                                   {:RESULT=VAR;:}
    | STRING_LITERAL:s	                                                            {:   RESULT = "\""+s+"\"" ;    :}
    | ifElse:ifelse                                                                 {:RESULT="("+ifelse+")";:}
    | REVERSE exp:exp                                                               {:RESULT="new StringBuffer("+exp+").reverse().toString()";:}
    | funcCall:f                                                                    {:RESULT=f;:};


funcDec::= IDENT:functionName  FDargsList:myArgs LBRACET body:funcBody  RBRACET      {:RESULT="public static String "+functionName+myArgs+"{"
                                                                                      +System.getProperty("line.separator")+funcBody+" }"+"\n";:};

argsList::= LPAREN Epsilon:expression argsListTail:nextArguments                     {:RESULT="("+expression+nextArguments;:}
            |LPAREN RPAREN                                                           {:RESULT="( )";:};

argsListTail::= COMA Epsilon:expression argsListTail:nextArguments                   {:RESULT=", "+expression+nextArguments;:}
            |RPAREN                                                                  {:RESULT=")";:};

funcCall::=IDENT:functionName argsList:myArgs                                        {:String s=functionName+myArgs;RESULT=s;:};

FDargsList::=LPAREN IDENT:argument FDargsListTail:nextArguments                      {: RESULT="("+"String "+argument+nextArguments;:}
            |  LPAREN RPAREN                                                         {:RESULT="( )";:};
FDargsListTail::= COMA IDENT:argument FDargsListTail:nextArguments                   {: RESULT =", "+"String "+argument+nextArguments;:}
            |  RPAREN                                                                {:RESULT=" )";:};

