/* Simple +/-/* expression language; parser evaluates constant expressions on the fly*/
/**
 *  Package and Import Specifications
 */
import java_cup.runtime.*;

/**
 *  Usercode Components
 */
parser code {:
    // Connect this parser to a scanner!
    Scanner s;
    Parser(Scanner s){ this.s=s; }
:}

/* define how to connect to the scanner! */
scan with {: return s.next_token(); :};

/**
 *  Symbol Lists
 */

/* Terminals (tokens returned by the scanner). */
terminal            SEMI, CONCAT, MINUS, TIMES, LPAREN, RPAREN, IF, WHILE, FOR, ELSE , PREFIX,REVERSE,PRINT,RBRACET,LBRACET,COMA;
terminal String     STRING_LITERAL,IDENT;        // our scanner provides numbers as strings

/*  Non terminals */
non terminal expr_list;
non terminal expr;      // used to store evaluated subexpressions
non terminal String     statement,body;
non terminal booleanEx;
non terminal String     ifElse;
non terminal String     prefixList;
non terminal String     Epsilon;
non terminal String     reverse;
non terminal String     concatenation;
non terminal String     funcDecList;
non terminal String funcDec, funcCall;
non terminal String argsList,argsListTail;
non terminal String ifexp;

/**
 *  Precedence Declarations
 */
precedence left PREFIX;
precedence left  IF,ELSE,TIMES;
precedence left  CONCAT;
precedence left  LBRACET;
precedence right REVERSE;

/**
 *  The Grammar Rules
 */

expr_list ::=expr:e  {:System.out.println();:};


expr::=          funcDecList:f                                  {:
                                                                String str=f;
                                                                String before="",after="";
                                                                char[] ch=str.toCharArray();
                                                                for(int i=ch.length-1;i>=0;i--){
                                                                    if(ch[i]=='}' ){
                                                                                    for(int k=i+1;k<ch.length;k++){
                                                                                        after+=ch[k];
                                                                                    }
                                                                                    for(int k=0;k<=i;k++){
                                                                                        before+=ch[k];
                                                                                    }
                                                                                    break;
                                                                                }
                                                                }

                                                                System.out.print("\npublic class Main {\n");
                                                                System.out.print("public static void main(String[] args) {");
                                                                System.out.printf("  %s",after);
                                                                System.out.print("\n }\n");
                                                                System.out.printf("\n%s",before);
                                                                System.out.print("\n}");

                                                            :};

body::=statement:bodyFunction                     {:RESULT = bodyFunction;:};

statement::=ifElse:ifElse                         {: RESULT=ifElse; :}
            |IDENT:var                            {:RESULT='"'+var+'"';:}
            ;

ifElse ::= IF LPAREN prefixList:prefixList RPAREN
                 statement:stm1
              ELSE
                 statement:stm2
                 {:
                    RESULT= prefixList+" ? "+stm1+" : "+stm2;
                 :}
                 |                                          {:RESULT="";:};

//booleanEx ::= IDENT:str1 PREFIX IDENT:str2        {: RESULT=(str2.startsWith(str1)); System.out.println(str2.startsWith(str1));:};

prefixList::= Epsilon:str1 PREFIX Epsilon:str2   {:RESULT="("+str1+")"+".startsWith("+str2+")";:};

Epsilon::= reverse:et concatenation:et2  ifElse:ifexp      {:String s;
                                                             if (ifexp.length()==0)s=et+et2+ifexp;
                                                             else s=et+et2+"("+ifexp+")";
                                                             RESULT =s;
                                                             :};




concatenation::= CONCAT Epsilon:epsilon                     {: RESULT="+"+epsilon;:}
                |                                           {: RESULT="";:}
                 ;

reverse::= IDENT:string                                {:RESULT='"'+string+'"';:}
              | REVERSE reverse:epsilonTail            {:
                                                                String newString="",str=epsilonTail;
                                                                char character;
                                                                for (int i=0; i<epsilonTail.length(); i++)
                                                                   {
                                                                     character= str.charAt(i); //extracts each character
                                                                     newString= character+newString; //adds each character in front of the existing string
                                                                   }
                                                                   RESULT=newString;:}
                |                                          {:RESULT="";:};


funcDecList::= funcDec:fd funcDecList:fdl                            {:RESULT=fd+fdl;:}
               |funcCall:fc funcDecList:fdl                          {:RESULT=fc+fdl;:}
               |                                                     {:RESULT="";:};

funcDec::= IDENT:functionName LPAREN argsList:myArgs RPAREN LBRACET body:funcBody RBRACET   {:RESULT="public static String "+functionName+"( "+myArgs+" ){"
                                                                                                +System.getProperty("line.separator")+"\t"+funcBody+" }"+"\n";
                                                                                                //System.out.printf("\n%s",RESULT);
                                                                                                :};

argsList::= IDENT:argument argsListTail:nextArguments                         {: RESULT="String "+argument+nextArguments;:}
            |;

argsListTail::= COMA IDENT:argument argsListTail:nextArguments                {: RESULT =", "+"String "+argument+nextArguments;:}
            |                                                                 {:RESULT="";:};

funcCall::=IDENT:functionName LPAREN argsList:myArgs RPAREN                   {:        String[] arrOfStr = myArgs.split("String");
                                                                                        String myNewArgs="";
                                                                                        for (String a : arrOfStr){

                                                                                            myNewArgs+=a;

                                                                                        }
                                                                                        String s=functionName+"( "+myNewArgs+" )";
                                                                                        RESULT="System.out.println("+s+");\n";
                                                                                :};